import { db } from "./firebase";
import { collection, getDocs, addDoc, updateDoc, doc, deleteDoc, setDoc, getDoc, onSnapshot } from "firebase/firestore";

// ◊ß◊®◊ô◊ê◊î ◊©◊ú ◊õ◊ú ◊î◊™◊ô◊ß◊ô◊ù
export async function getPatients() {
  console.log('üì• getPatients called');
  try {
    const querySnapshot = await getDocs(collection(db, "patients"));
    const patients = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    console.log('‚úÖ getPatients completed, found', patients.length, 'patients');
    console.log('üìã Patients data:', patients);
    return patients;
  } catch (error) {
    console.error('‚ùå getPatients failed:', error);
    throw error;
  }
}

// ◊ß◊®◊ô◊ê◊î ◊©◊ú ◊õ◊ú ◊î◊™◊ô◊ß◊ô◊ù ◊ë◊ñ◊û◊ü ◊ê◊û◊™
export function subscribeToPatients(callback) {
  console.log('üì° subscribeToPatients called');
  return onSnapshot(collection(db, "patients"), (querySnapshot) => {
    const patients = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    callback(patients);
  }, (error) => {
    console.error('‚ùå subscribeToPatients failed:', error);
    callback(null, error);
  });
}

// ◊î◊ï◊°◊§◊™ ◊™◊ô◊ß ◊ó◊ì◊©
export async function addPatient(patient) {
  await addDoc(collection(db, "patients"), patient);
}

// ◊¢◊ì◊õ◊ï◊ü ◊™◊ô◊ß
export async function updatePatient(id, data) {
  console.log('üî• updatePatient called with:', { id, data });
  try {
    await updateDoc(doc(db, "patients", id), data);
    console.log('‚úÖ updatePatient completed successfully');
  } catch (error) {
    console.error('‚ùå updatePatient failed:', error);
    throw error;
  }
}

// ◊û◊ó◊ô◊ß◊™ ◊™◊ô◊ß
export async function deletePatient(id) {
  await deleteDoc(doc(db, "patients", id));
}

// --- ◊°◊ò◊ò◊ï◊° ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô ---

// ◊ß◊®◊ô◊ê◊î ◊©◊ú ◊°◊ò◊ò◊ï◊° ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô
export async function getRoutineStatus() {
  const docSnap = await getDocs(collection(db, "routineStatus"));
  if (!docSnap.empty) {
    // ◊†◊ó◊ñ◊ô◊® ◊ê◊™ ◊î◊û◊°◊û◊ö ◊î◊®◊ê◊©◊ï◊ü (◊ë◊î◊†◊ó◊î ◊©◊ô◊© ◊®◊ß ◊ê◊ó◊ì ◊í◊ú◊ï◊ë◊ú◊ô)
    return { id: docSnap.docs[0].id, ...docSnap.docs[0].data() };
  }
  return null;
}

// ◊¢◊ì◊õ◊ï◊ü ◊°◊ò◊ò◊ï◊° ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô
export async function setRoutineStatus(statusArr) {
  // ◊†◊©◊û◊ï◊® ◊™◊û◊ô◊ì ◊ë◊û◊°◊û◊ö ◊ë◊©◊ù 'global'
  await setDoc(doc(db, "routineStatus", "global"), { routineChecked: statusArr });
}

// --- ◊î◊¢◊®◊ï◊™ ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô ---

// ◊ß◊®◊ô◊ê◊î ◊©◊ú ◊î◊¢◊®◊ï◊™ ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô
export async function getRoutineNotes() {
  const docRef = doc(db, "routineNotes", "global");
  const docSnap = await getDoc(docRef);
  if (docSnap.exists()) {
    return docSnap.data().notes || "";
  }
  return "";
}

// ◊¢◊ì◊õ◊ï◊ü ◊î◊¢◊®◊ï◊™ ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™ ◊í◊ú◊ï◊ë◊ú◊ô
export async function setRoutineNotes(notes) {
  await setDoc(doc(db, "routineNotes", "global"), { notes });
}

export async function getAppData() {
  console.log('üî• getAppData called');
  try {
    const docRef = doc(db, "workflow", "main");
    console.log('üìÑ Getting document from workflow/main');
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      let data = docSnap.data();
      // ◊û◊ô◊í◊®◊¶◊ô◊î ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™: ◊ê◊ù ◊ô◊© decisionTree ◊ë◊ï◊ì◊ì ◊ï◊ê◊ô◊ü decisionTrees, ◊†◊¢◊ò◊ï◊£ ◊ê◊ï◊™◊ï ◊õ◊ê◊ï◊ë◊ô◊ô◊ß◊ò
      if (data.decisionTree && !data.decisionTrees) {
        const newId = Date.now().toString();
        data.decisionTrees = { [newId]: data.decisionTree };
        delete data.decisionTree;
      }
      console.log('‚úÖ getAppData completed successfully:', data);
      return data;
    } else {
      console.error('‚ùå Document workflow/main does not exist');
      throw new Error("◊î◊û◊°◊û◊ö workflow/main ◊ú◊ê ◊ß◊ô◊ô◊ù ◊ë-Firestore");
    }
  } catch (error) {
    console.error('‚ùå getAppData failed:', error);
    throw error;
  }
}

export async function setAppData(data) {
  // ◊©◊û◊ô◊®◊î: ◊™◊û◊ô◊ì ◊†◊©◊û◊ï◊® decisionTrees ◊õ◊ê◊ï◊ë◊ô◊ô◊ß◊ò
  await setDoc(doc(db, "workflow", "main"), data);
}

// ◊°◊†◊õ◊®◊ï◊ü ◊ë◊ñ◊û◊ü ◊ê◊û◊™ ◊ú◊°◊ò◊ò◊ï◊° ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™
export function subscribeToRoutineStatus(callback) {
  const docRef = doc(db, "routineStatus", "global");
  return onSnapshot(docRef, (docSnap) => {
    if (docSnap.exists()) {
      callback(docSnap.data());
    } else {
      callback(null);
    }
  }, (error) => {
    console.error('‚ùå subscribeToRoutineStatus failed:', error);
    callback(null, error);
  });
}

// ◊°◊†◊õ◊®◊ï◊ü ◊ë◊ñ◊û◊ü ◊ê◊û◊™ ◊ú◊î◊¢◊®◊ï◊™ ◊û◊©◊ô◊û◊ï◊™ ◊©◊ï◊ò◊§◊ï◊™
export function subscribeToRoutineNotes(callback) {
  const docRef = doc(db, "routineNotes", "global");
  return onSnapshot(docRef, (docSnap) => {
    if (docSnap.exists()) {
      callback(docSnap.data().notes || "");
    } else {
      callback("");
    }
  }, (error) => {
    console.error('‚ùå subscribeToRoutineNotes failed:', error);
    callback(null, error);
  });
} 